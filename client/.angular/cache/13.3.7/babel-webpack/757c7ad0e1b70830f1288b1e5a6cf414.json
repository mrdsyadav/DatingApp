{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Pipe, Component, ChangeDetectionStrategy, Input, ViewChild, HostListener, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\nconst _c0 = [\"overlay\"];\n\nfunction NgxSpinnerComponent_div_0_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\n\nfunction NgxSpinnerComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NgxSpinnerComponent_div_0_div_2_div_1_Template, 1, 0, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r2.spinner.class);\n    i0.ɵɵstyleProp(\"color\", ctx_r2.spinner.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.spinner.divArray);\n  }\n}\n\nfunction NgxSpinnerComponent_div_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n    i0.ɵɵpipe(1, \"safeHtml\");\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind1(1, 1, ctx_r3.template), i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction NgxSpinnerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1, 2);\n    i0.ɵɵtemplate(2, NgxSpinnerComponent_div_0_div_2_Template, 2, 5, \"div\", 3);\n    i0.ɵɵtemplate(3, NgxSpinnerComponent_div_0_div_3_Template, 2, 3, \"div\", 4);\n    i0.ɵɵelementStart(4, \"div\", 5);\n    i0.ɵɵprojection(5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r0.spinner.bdColor)(\"z-index\", ctx_r0.spinner.zIndex)(\"position\", ctx_r0.spinner.fullScreen ? \"fixed\" : \"absolute\");\n    i0.ɵɵproperty(\"@.disabled\", ctx_r0.disableAnimation)(\"@fadeIn\", \"in\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.template);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.template);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"z-index\", ctx_r0.spinner.zIndex);\n  }\n}\n\nconst _c1 = [\"*\"];\nconst LOADERS = {\n  'ball-8bits': 16,\n  'ball-atom': 4,\n  'ball-beat': 3,\n  'ball-circus': 5,\n  'ball-climbing-dot': 4,\n  'ball-clip-rotate': 1,\n  'ball-clip-rotate-multiple': 2,\n  'ball-clip-rotate-pulse': 2,\n  'ball-elastic-dots': 5,\n  'ball-fall': 3,\n  'ball-fussion': 4,\n  'ball-grid-beat': 9,\n  'ball-grid-pulse': 9,\n  'ball-newton-cradle': 4,\n  'ball-pulse': 3,\n  'ball-pulse-rise': 5,\n  'ball-pulse-sync': 3,\n  'ball-rotate': 1,\n  'ball-running-dots': 5,\n  'ball-scale': 1,\n  'ball-scale-multiple': 3,\n  'ball-scale-pulse': 2,\n  'ball-scale-ripple': 1,\n  'ball-scale-ripple-multiple': 3,\n  'ball-spin': 8,\n  'ball-spin-clockwise': 8,\n  'ball-spin-clockwise-fade': 8,\n  'ball-spin-clockwise-fade-rotating': 8,\n  'ball-spin-fade': 8,\n  'ball-spin-fade-rotating': 8,\n  'ball-spin-rotate': 2,\n  'ball-square-clockwise-spin': 8,\n  'ball-square-spin': 8,\n  'ball-triangle-path': 3,\n  'ball-zig-zag': 2,\n  'ball-zig-zag-deflect': 2,\n  'cog': 1,\n  'cube-transition': 2,\n  'fire': 3,\n  'line-scale': 5,\n  'line-scale-party': 5,\n  'line-scale-pulse-out': 5,\n  'line-scale-pulse-out-rapid': 5,\n  'line-spin-clockwise-fade': 8,\n  'line-spin-clockwise-fade-rotating': 8,\n  'line-spin-fade': 8,\n  'line-spin-fade-rotating': 8,\n  'pacman': 6,\n  'square-jelly-box': 2,\n  'square-loader': 1,\n  'square-spin': 1,\n  'timer': 1,\n  'triangle-skew-spin': 1\n};\nconst DEFAULTS = {\n  BD_COLOR: 'rgba(51,51,51,0.8)',\n  SPINNER_COLOR: '#fff',\n  Z_INDEX: 99999\n};\nconst PRIMARY_SPINNER = 'primary';\n\nclass NgxSpinner {\n  constructor(init) {\n    Object.assign(this, init);\n  }\n\n  static create(init) {\n    if ((init === null || init === void 0 ? void 0 : init.type) == null || init.type.length === 0) {\n      console.warn(`[ngx-spinner]: Property \"type\" is missed. Please, provide animation type to <ngx-spinner> component\n        and ensure css is added to angular.json file`);\n    }\n\n    return new NgxSpinner(init);\n  }\n\n}\n\nclass NgxSpinnerService {\n  /**\n   * Creates an instance of NgxSpinnerService.\n   * @memberof NgxSpinnerService\n   */\n  constructor() {\n    /**\n     * Spinner observable\n     *\n     * @memberof NgxSpinnerService\n     */\n    // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n    this.spinnerObservable = new BehaviorSubject(null);\n  }\n  /**\n  * Get subscription of desired spinner\n  * @memberof NgxSpinnerService\n  **/\n\n\n  getSpinner(name) {\n    return this.spinnerObservable.asObservable().pipe(filter(x => x && x.name === name));\n  }\n  /**\n   * To show spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n\n\n  show(name = PRIMARY_SPINNER, spinner) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        if (spinner && Object.keys(spinner).length) {\n          spinner['name'] = name;\n          this.spinnerObservable.next(new NgxSpinner(Object.assign(Object.assign({}, spinner), {\n            show: true\n          })));\n          resolve(true);\n        } else {\n          this.spinnerObservable.next(new NgxSpinner({\n            name,\n            show: true\n          }));\n          resolve(true);\n        }\n      }, 10);\n    });\n  }\n  /**\n  * To hide spinner\n  *\n  * @memberof NgxSpinnerService\n  */\n\n\n  hide(name = PRIMARY_SPINNER, debounce = 10) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        this.spinnerObservable.next(new NgxSpinner({\n          name,\n          show: false\n        }));\n        resolve(true);\n      }, debounce);\n    });\n  }\n\n}\n\nNgxSpinnerService.ɵfac = function NgxSpinnerService_Factory(t) {\n  return new (t || NgxSpinnerService)();\n};\n\nNgxSpinnerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxSpinnerService,\n  factory: NgxSpinnerService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass SafeHtmlPipe {\n  constructor(_sanitizer) {\n    this._sanitizer = _sanitizer;\n  }\n\n  transform(v) {\n    if (v) {\n      return this._sanitizer.bypassSecurityTrustHtml(v);\n    }\n  }\n\n}\n\nSafeHtmlPipe.ɵfac = function SafeHtmlPipe_Factory(t) {\n  return new (t || SafeHtmlPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n};\n\nSafeHtmlPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"safeHtml\",\n  type: SafeHtmlPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SafeHtmlPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'safeHtml'\n    }]\n  }], function () {\n    return [{\n      type: i1.DomSanitizer\n    }];\n  }, null);\n})();\n\nclass NgxSpinnerComponent {\n  /**\n   * Creates an instance of NgxSpinnerComponent.\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  constructor(spinnerService, changeDetector, elementRef) {\n    this.spinnerService = spinnerService;\n    this.changeDetector = changeDetector;\n    this.elementRef = elementRef;\n    /**\n     * To enable/disable animation\n     *\n     * @type {boolean}\n     * @memberof NgxSpinnerComponent\n     */\n\n    this.disableAnimation = false;\n    /**\n     * Spinner Object\n     *\n     * @memberof NgxSpinnerComponent\n     */\n\n    this.spinner = new NgxSpinner();\n    /**\n     * Unsubscribe from spinner's observable\n     *\n     * @memberof NgxSpinnerComponent\n    **/\n\n    this.ngUnsubscribe = new Subject();\n    /**\n     * To set default ngx-spinner options\n     *\n     * @memberof NgxSpinnerComponent\n     */\n\n    this.setDefaultOptions = () => {\n      this.spinner = NgxSpinner.create({\n        name: this.name,\n        bdColor: this.bdColor,\n        size: this.size,\n        color: this.color,\n        type: this.type,\n        fullScreen: this.fullScreen,\n        divArray: this.divArray,\n        divCount: this.divCount,\n        show: this.show,\n        zIndex: this.zIndex,\n        template: this.template,\n        showSpinner: this.showSpinner\n      });\n    };\n\n    this.bdColor = DEFAULTS.BD_COLOR;\n    this.zIndex = DEFAULTS.Z_INDEX;\n    this.color = DEFAULTS.SPINNER_COLOR;\n    this.size = 'large';\n    this.fullScreen = true;\n    this.name = PRIMARY_SPINNER;\n    this.template = null;\n    this.showSpinner = false;\n    this.divArray = [];\n    this.divCount = 0;\n    this.show = false;\n  }\n\n  handleKeyboardEvent(event) {\n    if (this.spinnerDOM && this.spinnerDOM.nativeElement) {\n      if (this.fullScreen || !this.fullScreen && this.isSpinnerZone(event.target)) {\n        event.returnValue = false;\n        event.preventDefault();\n      }\n    }\n  }\n\n  initObservable() {\n    this.spinnerService.getSpinner(this.name).pipe(takeUntil(this.ngUnsubscribe)).subscribe(spinner => {\n      this.setDefaultOptions();\n      Object.assign(this.spinner, spinner);\n\n      if (spinner.show) {\n        this.onInputChange();\n      }\n\n      this.changeDetector.detectChanges();\n    });\n  }\n  /**\n   * Initialization method\n   *\n   * @memberof NgxSpinnerComponent\n   */\n\n\n  ngOnInit() {\n    this.setDefaultOptions();\n    this.initObservable();\n  }\n  /**\n   * To check event triggers inside the Spinner Zone\n   *\n   * @param {*} element\n   * @returns {boolean}\n   * @memberof NgxSpinnerComponent\n   */\n\n\n  isSpinnerZone(element) {\n    if (element === this.elementRef.nativeElement.parentElement) {\n      return true;\n    }\n\n    return element.parentNode && this.isSpinnerZone(element.parentNode);\n  }\n  /**\n   * On changes event for input variables\n   *\n   * @memberof NgxSpinnerComponent\n   */\n\n\n  ngOnChanges(changes) {\n    for (const propName in changes) {\n      if (propName) {\n        const changedProp = changes[propName];\n\n        if (changedProp.isFirstChange()) {\n          return;\n        } else if (typeof changedProp.currentValue !== 'undefined' && changedProp.currentValue !== changedProp.previousValue) {\n          if (changedProp.currentValue !== '') {\n            this.spinner[propName] = changedProp.currentValue;\n\n            if (propName === 'showSpinner') {\n              if (changedProp.currentValue) {\n                this.spinnerService.show(this.spinner.name, this.spinner);\n              } else {\n                this.spinnerService.hide(this.spinner.name);\n              }\n            }\n\n            if (propName === 'name') {\n              this.initObservable();\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * To get class for spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n\n\n  getClass(type, size) {\n    this.spinner.divCount = LOADERS[type];\n    this.spinner.divArray = Array(this.spinner.divCount).fill(0).map((_, i) => i);\n    let sizeClass = '';\n\n    switch (size.toLowerCase()) {\n      case 'small':\n        sizeClass = 'la-sm';\n        break;\n\n      case 'medium':\n        sizeClass = 'la-2x';\n        break;\n\n      case 'large':\n        sizeClass = 'la-3x';\n        break;\n\n      default:\n        break;\n    }\n\n    return 'la-' + type + ' ' + sizeClass;\n  }\n  /**\n   * Check if input variables have changed\n   *\n   * @memberof NgxSpinnerComponent\n   */\n\n\n  onInputChange() {\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n  }\n  /**\n   * Component destroy event\n   *\n   * @memberof NgxSpinnerComponent\n   */\n\n\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n\n}\n\nNgxSpinnerComponent.ɵfac = function NgxSpinnerComponent_Factory(t) {\n  return new (t || NgxSpinnerComponent)(i0.ɵɵdirectiveInject(NgxSpinnerService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nNgxSpinnerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxSpinnerComponent,\n  selectors: [[\"ngx-spinner\"]],\n  viewQuery: function NgxSpinnerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.spinnerDOM = _t.first);\n    }\n  },\n  hostBindings: function NgxSpinnerComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function NgxSpinnerComponent_keydown_HostBindingHandler($event) {\n        return ctx.handleKeyboardEvent($event);\n      }, false, i0.ɵɵresolveDocument);\n    }\n  },\n  inputs: {\n    bdColor: \"bdColor\",\n    size: \"size\",\n    color: \"color\",\n    type: \"type\",\n    fullScreen: \"fullScreen\",\n    name: \"name\",\n    zIndex: \"zIndex\",\n    template: \"template\",\n    showSpinner: \"showSpinner\",\n    disableAnimation: \"disableAnimation\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"ngx-spinner-overlay\", 3, \"background-color\", \"z-index\", \"position\", 4, \"ngIf\"], [1, \"ngx-spinner-overlay\"], [\"overlay\", \"\"], [3, \"class\", \"color\", 4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [1, \"loading-text\"], [4, \"ngFor\", \"ngForOf\"], [3, \"innerHTML\"]],\n  template: function NgxSpinnerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, NgxSpinnerComponent_div_0_Template, 6, 12, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.spinner.show);\n    }\n  },\n  directives: [i2.NgIf, i2.NgForOf],\n  pipes: [SafeHtmlPipe],\n  styles: [\".ngx-spinner-overlay[_ngcontent-%COMP%]{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text[_ngcontent-%COMP%]{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\"],\n  data: {\n    animation: [trigger('fadeIn', [state('in', style({\n      opacity: 1\n    })), transition(':enter', [style({\n      opacity: 0\n    }), animate(300)]), transition(':leave', animate(200, style({\n      opacity: 0\n    })))])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-spinner',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('fadeIn', [state('in', style({\n        opacity: 1\n      })), transition(':enter', [style({\n        opacity: 0\n      }), animate(300)]), transition(':leave', animate(200, style({\n        opacity: 0\n      })))])],\n      template: \"<div [@.disabled]=\\\"disableAnimation\\\" [@fadeIn]=\\\"'in'\\\" *ngIf=\\\"spinner.show\\\" class=\\\"ngx-spinner-overlay\\\"\\n  [style.background-color]=\\\"spinner.bdColor\\\" [style.z-index]=\\\"spinner.zIndex\\\"\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\" #overlay>\\n  <div *ngIf=\\\"!template\\\" [class]=\\\"spinner.class\\\" [style.color]=\\\"spinner.color\\\">\\n    <div *ngFor=\\\"let index of spinner.divArray\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"template\\\" [innerHTML]=\\\"template | safeHtml\\\"></div>\\n  <div class=\\\"loading-text\\\" [style.z-index]=\\\"spinner.zIndex\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</div>\",\n      styles: [\".ngx-spinner-overlay{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay>div:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxSpinnerService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    bdColor: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    fullScreen: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    showSpinner: [{\n      type: Input\n    }],\n    disableAnimation: [{\n      type: Input\n    }],\n    spinnerDOM: [{\n      type: ViewChild,\n      args: ['overlay']\n    }],\n    handleKeyboardEvent: [{\n      type: HostListener,\n      args: ['document:keydown', ['$event']]\n    }]\n  });\n})();\n\nclass NgxSpinnerModule {}\n\nNgxSpinnerModule.ɵfac = function NgxSpinnerModule_Factory(t) {\n  return new (t || NgxSpinnerModule)();\n};\n\nNgxSpinnerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxSpinnerModule\n});\nNgxSpinnerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n      exports: [NgxSpinnerComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-spinner\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DEFAULTS, LOADERS, NgxSpinner, NgxSpinnerComponent, NgxSpinnerModule, NgxSpinnerService, PRIMARY_SPINNER };","map":{"version":3,"names":["i0","Injectable","Pipe","Component","ChangeDetectionStrategy","Input","ViewChild","HostListener","NgModule","BehaviorSubject","Subject","filter","takeUntil","trigger","state","style","transition","animate","i2","CommonModule","i1","LOADERS","DEFAULTS","BD_COLOR","SPINNER_COLOR","Z_INDEX","PRIMARY_SPINNER","NgxSpinner","constructor","init","Object","assign","create","type","length","console","warn","NgxSpinnerService","spinnerObservable","getSpinner","name","asObservable","pipe","x","show","spinner","Promise","resolve","_reject","setTimeout","keys","next","hide","debounce","ɵfac","ɵprov","args","providedIn","SafeHtmlPipe","_sanitizer","transform","v","bypassSecurityTrustHtml","DomSanitizer","ɵpipe","NgxSpinnerComponent","spinnerService","changeDetector","elementRef","disableAnimation","ngUnsubscribe","setDefaultOptions","bdColor","size","color","fullScreen","divArray","divCount","zIndex","template","showSpinner","handleKeyboardEvent","event","spinnerDOM","nativeElement","isSpinnerZone","target","returnValue","preventDefault","initObservable","subscribe","onInputChange","detectChanges","ngOnInit","element","parentElement","parentNode","ngOnChanges","changes","propName","changedProp","isFirstChange","currentValue","previousValue","getClass","Array","fill","map","_","i","sizeClass","toLowerCase","class","ngOnDestroy","complete","ChangeDetectorRef","ElementRef","ɵcmp","NgIf","NgForOf","opacity","selector","changeDetection","OnPush","animations","styles","NgxSpinnerModule","ɵmod","ɵinj","imports","declarations","exports"],"sources":["D:/Mohan/Others/DotNetCoreAngular/DatingApp/client/node_modules/ngx-spinner/fesm2015/ngx-spinner.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Pipe, Component, ChangeDetectionStrategy, Input, ViewChild, HostListener, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\n\nconst LOADERS = {\n    'ball-8bits': 16,\n    'ball-atom': 4,\n    'ball-beat': 3,\n    'ball-circus': 5,\n    'ball-climbing-dot': 4,\n    'ball-clip-rotate': 1,\n    'ball-clip-rotate-multiple': 2,\n    'ball-clip-rotate-pulse': 2,\n    'ball-elastic-dots': 5,\n    'ball-fall': 3,\n    'ball-fussion': 4,\n    'ball-grid-beat': 9,\n    'ball-grid-pulse': 9,\n    'ball-newton-cradle': 4,\n    'ball-pulse': 3,\n    'ball-pulse-rise': 5,\n    'ball-pulse-sync': 3,\n    'ball-rotate': 1,\n    'ball-running-dots': 5,\n    'ball-scale': 1,\n    'ball-scale-multiple': 3,\n    'ball-scale-pulse': 2,\n    'ball-scale-ripple': 1,\n    'ball-scale-ripple-multiple': 3,\n    'ball-spin': 8,\n    'ball-spin-clockwise': 8,\n    'ball-spin-clockwise-fade': 8,\n    'ball-spin-clockwise-fade-rotating': 8,\n    'ball-spin-fade': 8,\n    'ball-spin-fade-rotating': 8,\n    'ball-spin-rotate': 2,\n    'ball-square-clockwise-spin': 8,\n    'ball-square-spin': 8,\n    'ball-triangle-path': 3,\n    'ball-zig-zag': 2,\n    'ball-zig-zag-deflect': 2,\n    'cog': 1,\n    'cube-transition': 2,\n    'fire': 3,\n    'line-scale': 5,\n    'line-scale-party': 5,\n    'line-scale-pulse-out': 5,\n    'line-scale-pulse-out-rapid': 5,\n    'line-spin-clockwise-fade': 8,\n    'line-spin-clockwise-fade-rotating': 8,\n    'line-spin-fade': 8,\n    'line-spin-fade-rotating': 8,\n    'pacman': 6,\n    'square-jelly-box': 2,\n    'square-loader': 1,\n    'square-spin': 1,\n    'timer': 1,\n    'triangle-skew-spin': 1\n};\nconst DEFAULTS = {\n    BD_COLOR: 'rgba(51,51,51,0.8)',\n    SPINNER_COLOR: '#fff',\n    Z_INDEX: 99999,\n};\nconst PRIMARY_SPINNER = 'primary';\nclass NgxSpinner {\n    constructor(init) {\n        Object.assign(this, init);\n    }\n    static create(init) {\n        if ((init === null || init === void 0 ? void 0 : init.type) == null || init.type.length === 0) {\n            console.warn(`[ngx-spinner]: Property \"type\" is missed. Please, provide animation type to <ngx-spinner> component\n        and ensure css is added to angular.json file`);\n        }\n        return new NgxSpinner(init);\n    }\n}\n\nclass NgxSpinnerService {\n    /**\n     * Creates an instance of NgxSpinnerService.\n     * @memberof NgxSpinnerService\n     */\n    constructor() {\n        /**\n         * Spinner observable\n         *\n         * @memberof NgxSpinnerService\n         */\n        // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n        this.spinnerObservable = new BehaviorSubject(null);\n    }\n    /**\n    * Get subscription of desired spinner\n    * @memberof NgxSpinnerService\n    **/\n    getSpinner(name) {\n        return this.spinnerObservable.asObservable().pipe(filter((x) => x && x.name === name));\n    }\n    /**\n     * To show spinner\n     *\n     * @memberof NgxSpinnerService\n     */\n    show(name = PRIMARY_SPINNER, spinner) {\n        return new Promise((resolve, _reject) => {\n            setTimeout(() => {\n                if (spinner && Object.keys(spinner).length) {\n                    spinner['name'] = name;\n                    this.spinnerObservable.next(new NgxSpinner(Object.assign(Object.assign({}, spinner), { show: true })));\n                    resolve(true);\n                }\n                else {\n                    this.spinnerObservable.next(new NgxSpinner({ name, show: true }));\n                    resolve(true);\n                }\n            }, 10);\n        });\n    }\n    /**\n    * To hide spinner\n    *\n    * @memberof NgxSpinnerService\n    */\n    hide(name = PRIMARY_SPINNER, debounce = 10) {\n        return new Promise((resolve, _reject) => {\n            setTimeout(() => {\n                this.spinnerObservable.next(new NgxSpinner({ name, show: false }));\n                resolve(true);\n            }, debounce);\n        });\n    }\n}\nNgxSpinnerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxSpinnerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgxSpinnerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxSpinnerService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxSpinnerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass SafeHtmlPipe {\n    constructor(_sanitizer) {\n        this._sanitizer = _sanitizer;\n    }\n    transform(v) {\n        if (v) {\n            return this._sanitizer.bypassSecurityTrustHtml(v);\n        }\n    }\n}\nSafeHtmlPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: SafeHtmlPipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe });\nSafeHtmlPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: SafeHtmlPipe, name: \"safeHtml\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: SafeHtmlPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'safeHtml'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nclass NgxSpinnerComponent {\n    /**\n     * Creates an instance of NgxSpinnerComponent.\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    constructor(spinnerService, changeDetector, elementRef) {\n        this.spinnerService = spinnerService;\n        this.changeDetector = changeDetector;\n        this.elementRef = elementRef;\n        /**\n         * To enable/disable animation\n         *\n         * @type {boolean}\n         * @memberof NgxSpinnerComponent\n         */\n        this.disableAnimation = false;\n        /**\n         * Spinner Object\n         *\n         * @memberof NgxSpinnerComponent\n         */\n        this.spinner = new NgxSpinner();\n        /**\n         * Unsubscribe from spinner's observable\n         *\n         * @memberof NgxSpinnerComponent\n        **/\n        this.ngUnsubscribe = new Subject();\n        /**\n         * To set default ngx-spinner options\n         *\n         * @memberof NgxSpinnerComponent\n         */\n        this.setDefaultOptions = () => {\n            this.spinner = NgxSpinner.create({\n                name: this.name,\n                bdColor: this.bdColor,\n                size: this.size,\n                color: this.color,\n                type: this.type,\n                fullScreen: this.fullScreen,\n                divArray: this.divArray,\n                divCount: this.divCount,\n                show: this.show,\n                zIndex: this.zIndex,\n                template: this.template,\n                showSpinner: this.showSpinner\n            });\n        };\n        this.bdColor = DEFAULTS.BD_COLOR;\n        this.zIndex = DEFAULTS.Z_INDEX;\n        this.color = DEFAULTS.SPINNER_COLOR;\n        this.size = 'large';\n        this.fullScreen = true;\n        this.name = PRIMARY_SPINNER;\n        this.template = null;\n        this.showSpinner = false;\n        this.divArray = [];\n        this.divCount = 0;\n        this.show = false;\n    }\n    handleKeyboardEvent(event) {\n        if (this.spinnerDOM && this.spinnerDOM.nativeElement) {\n            if (this.fullScreen || (!this.fullScreen && this.isSpinnerZone(event.target))) {\n                event.returnValue = false;\n                event.preventDefault();\n            }\n        }\n    }\n    initObservable() {\n        this.spinnerService.getSpinner(this.name)\n            .pipe(takeUntil(this.ngUnsubscribe))\n            .subscribe((spinner) => {\n            this.setDefaultOptions();\n            Object.assign(this.spinner, spinner);\n            if (spinner.show) {\n                this.onInputChange();\n            }\n            this.changeDetector.detectChanges();\n        });\n    }\n    /**\n     * Initialization method\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    ngOnInit() {\n        this.setDefaultOptions();\n        this.initObservable();\n    }\n    /**\n     * To check event triggers inside the Spinner Zone\n     *\n     * @param {*} element\n     * @returns {boolean}\n     * @memberof NgxSpinnerComponent\n     */\n    isSpinnerZone(element) {\n        if (element === this.elementRef.nativeElement.parentElement) {\n            return true;\n        }\n        return element.parentNode && this.isSpinnerZone(element.parentNode);\n    }\n    /**\n     * On changes event for input variables\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    ngOnChanges(changes) {\n        for (const propName in changes) {\n            if (propName) {\n                const changedProp = changes[propName];\n                if (changedProp.isFirstChange()) {\n                    return;\n                }\n                else if (typeof changedProp.currentValue !== 'undefined' && changedProp.currentValue !== changedProp.previousValue) {\n                    if (changedProp.currentValue !== '') {\n                        this.spinner[propName] = changedProp.currentValue;\n                        if (propName === 'showSpinner') {\n                            if (changedProp.currentValue) {\n                                this.spinnerService.show(this.spinner.name, this.spinner);\n                            }\n                            else {\n                                this.spinnerService.hide(this.spinner.name);\n                            }\n                        }\n                        if (propName === 'name') {\n                            this.initObservable();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * To get class for spinner\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    getClass(type, size) {\n        this.spinner.divCount = LOADERS[type];\n        this.spinner.divArray = Array(this.spinner.divCount).fill(0).map((_, i) => i);\n        let sizeClass = '';\n        switch (size.toLowerCase()) {\n            case 'small':\n                sizeClass = 'la-sm';\n                break;\n            case 'medium':\n                sizeClass = 'la-2x';\n                break;\n            case 'large':\n                sizeClass = 'la-3x';\n                break;\n            default:\n                break;\n        }\n        return 'la-' + type + ' ' + sizeClass;\n    }\n    /**\n     * Check if input variables have changed\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    onInputChange() {\n        this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n    }\n    /**\n     * Component destroy event\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    ngOnDestroy() {\n        this.ngUnsubscribe.next();\n        this.ngUnsubscribe.complete();\n    }\n}\nNgxSpinnerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxSpinnerComponent, deps: [{ token: NgxSpinnerService }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nNgxSpinnerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.3\", type: NgxSpinnerComponent, selector: \"ngx-spinner\", inputs: { bdColor: \"bdColor\", size: \"size\", color: \"color\", type: \"type\", fullScreen: \"fullScreen\", name: \"name\", zIndex: \"zIndex\", template: \"template\", showSpinner: \"showSpinner\", disableAnimation: \"disableAnimation\" }, host: { listeners: { \"document:keydown\": \"handleKeyboardEvent($event)\" } }, viewQueries: [{ propertyName: \"spinnerDOM\", first: true, predicate: [\"overlay\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div [@.disabled]=\\\"disableAnimation\\\" [@fadeIn]=\\\"'in'\\\" *ngIf=\\\"spinner.show\\\" class=\\\"ngx-spinner-overlay\\\"\\n  [style.background-color]=\\\"spinner.bdColor\\\" [style.z-index]=\\\"spinner.zIndex\\\"\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\" #overlay>\\n  <div *ngIf=\\\"!template\\\" [class]=\\\"spinner.class\\\" [style.color]=\\\"spinner.color\\\">\\n    <div *ngFor=\\\"let index of spinner.divArray\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"template\\\" [innerHTML]=\\\"template | safeHtml\\\"></div>\\n  <div class=\\\"loading-text\\\" [style.z-index]=\\\"spinner.zIndex\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</div>\", styles: [\".ngx-spinner-overlay{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay>div:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], pipes: { \"safeHtml\": SafeHtmlPipe }, animations: [\n        trigger('fadeIn', [\n            state('in', style({ opacity: 1 })),\n            transition(':enter', [\n                style({ opacity: 0 }),\n                animate(300)\n            ]),\n            transition(':leave', animate(200, style({ opacity: 0 })))\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxSpinnerComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-spinner', changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('fadeIn', [\n                            state('in', style({ opacity: 1 })),\n                            transition(':enter', [\n                                style({ opacity: 0 }),\n                                animate(300)\n                            ]),\n                            transition(':leave', animate(200, style({ opacity: 0 })))\n                        ])\n                    ], template: \"<div [@.disabled]=\\\"disableAnimation\\\" [@fadeIn]=\\\"'in'\\\" *ngIf=\\\"spinner.show\\\" class=\\\"ngx-spinner-overlay\\\"\\n  [style.background-color]=\\\"spinner.bdColor\\\" [style.z-index]=\\\"spinner.zIndex\\\"\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\" #overlay>\\n  <div *ngIf=\\\"!template\\\" [class]=\\\"spinner.class\\\" [style.color]=\\\"spinner.color\\\">\\n    <div *ngFor=\\\"let index of spinner.divArray\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"template\\\" [innerHTML]=\\\"template | safeHtml\\\"></div>\\n  <div class=\\\"loading-text\\\" [style.z-index]=\\\"spinner.zIndex\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</div>\", styles: [\".ngx-spinner-overlay{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay>div:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: NgxSpinnerService }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { bdColor: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], fullScreen: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], zIndex: [{\n                type: Input\n            }], template: [{\n                type: Input\n            }], showSpinner: [{\n                type: Input\n            }], disableAnimation: [{\n                type: Input\n            }], spinnerDOM: [{\n                type: ViewChild,\n                args: ['overlay']\n            }], handleKeyboardEvent: [{\n                type: HostListener,\n                args: ['document:keydown', ['$event']]\n            }] } });\n\nclass NgxSpinnerModule {\n}\nNgxSpinnerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxSpinnerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxSpinnerModule, declarations: [NgxSpinnerComponent, SafeHtmlPipe], imports: [CommonModule], exports: [NgxSpinnerComponent] });\nNgxSpinnerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxSpinnerModule, imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.3\", ngImport: i0, type: NgxSpinnerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n                    exports: [NgxSpinnerComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-spinner\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULTS, LOADERS, NgxSpinner, NgxSpinnerComponent, NgxSpinnerModule, NgxSpinnerService, PRIMARY_SPINNER };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}